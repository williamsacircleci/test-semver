version: 2.1

### Aliases

ignore-master: &ignore-master
  filters:
    branches:
      ignore:
        - master

## ORBS
orbs:
  aws-ecr: circleci/aws-ecr@0.0.4

### COMMANDS

commands:
  circle-default-envs:
     description: "Default Circle Environment variables"
     steps:
       - run: |
           export GIT_BRANCH=${CIRCLE_BRANCH}
           export BUILD_ID=$(echo ${CIRCLE_SHA1} | rev |cut -c1-4 | rev)
           export BUILD_TAG="circleci-${CIRCLE_JOB}-${CIRCLE_BUILD_NUM}"
           export BUILD_DISPLAY_NAME=${CIRCLE_BUILD_NUM}
           export JOB_BASE_NAME=${CIRCLE_JOB}
           export JOB_NAME=${CIRCLE_BUILD_URL}
           echo "export GIT_BRANCH=${GIT_BRANCH}" >> $BASH_ENV
           echo "export BUILD_ID=${BUILD_ID}" >> $BASH_ENV
           echo "export BUILD_TAG=${BUILD_TAG}" >> $BASH_ENV
           echo "export BUILD_DISPLAY_NAME=${BUILD_DISPLAY_NAME}" >> $BASH_ENV
           echo "export JOB_BASE_NAME=${JOB_BASE_NAME}" >> $BASH_ENV
           echo "export JOB_NAME=${JOB_NAME}" >> $BASH_ENV
           source $BASH_ENV

assume-aws-role:
     description: "Assume AWS ROLE"
     parameters:
       aws_access_key_id:
         description: AWS Access Key ID
         type: string
         default: "${AWS_ACCESS_KEY_ID}"
       aws_secret_key:
         description: AWS Secret Key
         type: string
         default: "${AWS_SECRET_ACCESS_KEY}"
       aws_assume_role_arn:
         description: AWS Role ARN To Assumes
         type: string
     steps:
       - run: |
          export AWS_ACCESS_KEY_ID=<< parameters.aws_access_key_id >>
          export AWS_SECRET_ACCESS_KEY=<< parameters.aws_secret_key >>
          export temp_role=$(aws sts assume-role \
                  --role-arn << parameters.aws_assume_role_arn >> \
                  --role-session-name "circle-ci-assume")
          export AWS_ACCESS_KEY_ID_TEMP=$(echo $temp_role | jq .Credentials.AccessKeyId | xargs)
          export AWS_SECRET_ACCESS_KEY_TEMP=$(echo $temp_role | jq .Credentials.SecretAccessKey | xargs)
          export AWS_SESSION_TOKEN_TEMP=$(echo $temp_role | jq .Credentials.SessionToken | xargs)
          echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID_TEMP}" >> $BASH_ENV
          echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY_TEMP}" >> $BASH_ENV
          echo "export AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN_TEMP}" >> $BASH_ENV
          source $BASH_ENV

### JOBS

jobs:
  build:
    parameters:
      aws_access_key_id:
         description: aws access key id
         type: string
      aws_secret_key:
         description: aws secret key secret
         type: string
    executor: heycar-citools-helm
    working_directory: ~/code
    environment:
      BASH: true
    steps:
      - checkout:
          path: ~/code
      - attach_workspace:
          at: .
      - setup_remote_docker
      - circle-default-envs
      - run:
         name: export env vars
         command: |
           export AWS_ACCESS_KEY_ID=<< parameters.aws_access_key_id >>
           export AWS_SECRET_ACCESS_KEY=<< parameters.aws_secret_key >>
           echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> $BASH_ENV
           echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> $BASH_ENV

workflows:
  build_test_deploy:
    jobs:
      - aws-ecr/build:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          dockerfile: Dockerfile
          path: .
          region: AWS_REGION
          repo: circleci-ecr-orb-demo
          tag: "$CIRCLE_SHA1"